SRV_CONFIG_SERVER=0.0.0-33.708a2acf-SNAPSHOT
SVC_PROXY=0.0.0-97.d9e69520-SNAPSHOT
SRV_SIGNATURE_ANALYZER=0.0.0-49.d16c2afc-SNAPSHOT
SRV_IDOR_ANALYZER=0.0.0-2.aa9d5821.dirty-SNAPSHOT
SRV_REQUEST_LOGGER=0.0.0-93.ac5d1485.dirty-SNAPSHOT
SRV_URL_PROFILER=0.0.0-51.be705b47-SNAPSHOT
SRV_API_GATEWAY=0.0.0-8.51b8ddbf-SNAPSHOT
SRV_AUTH=0.0.0-12.c26b3ee2-SNAPSHOT
UI=0.0.273-a01200d9d92892a158f50d25cfdf2ee6a653ca16
SRV_GATE_CLASS_ANALYZER=0.0.0-1.19d70c13.dirty-SNAPSHOT
ENVOY_ALC=0.0.0-4.7f77cb56-SNAPSHOT
SRV_ML_CLASS_ANALYZER=http02
SRV_ML_ATTACK_ANALYZER=tokenization26

admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901


static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 10000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                access_log:
                  - name: envoy.access_loggers.http_grpc
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig
                      common_config:
                        log_name: "mygrpclog"
                        transport_api_version: V3
                        grpc_service:
                          envoy_grpc:
                            cluster_name: grpc_als_cluster
#                    filter:
#                      header_filter:
#                        header:
#                          name: 'Content-Type'
#                          present_match: true
                http_filters:
                  - name: envoy.lua
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
                      default_source_code:
                        inline_string: |
                          local mimeTypes = {'text/plain', 'text/html', 'application/json', 'application/xml', 'application/javascript'}
                          local function hasMime (tab, mime)
                            if mime == nil then
                              return false
                            end
                            for index, value in ipairs(tab) do
                              if string.find(mime, value) then
                                return true
                              end
                            end
                            return false
                          end

                          function envoy_on_request(request_handle)
                            local headers = request_handle:headers()
                            local headersMap = {}
                            for key, value in pairs(headers) do
                              headersMap[key] = value
                            end
                            request_handle:streamInfo():dynamicMetadata():set("envoy.lua","REQUEST_HEADERS",headersMap)

                            local res = request_handle:body()
                            if res ~= nil then
                              local requestBody = res:getBytes(0, res:length())
                              request_handle:streamInfo():dynamicMetadata():set("envoy.lua","REQUEST_BODY",requestBody)
                            end
                          end

                          function envoy_on_response(response_handle)
                            local headers = response_handle:headers()
                            local headersMap = {}
                            for key, value in pairs(headers) do
                              headersMap[key] = value
                            end
                            response_handle:streamInfo():dynamicMetadata():set("envoy.lua","RESPONSE_HEADERS",headersMap)
                            if (headersMap["content-type"] ~= nil and hasMime(mimeTypes, headersMap['content-type'])) then
                              local responseBody = ""
                              for chunk in response_handle:bodyChunks() do
                                if (chunk:length() > 0) then
                                  responseBody = responseBody .. chunk:getBytes(0, chunk:length())
                                end
                              end
                              response_handle:streamInfo():dynamicMetadata():set("envoy.lua","RESPONSE_BODY",responseBody)
                            end
                          end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: [ "*" ]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            host_rewrite_literal: vm1.squadsecfield.ru
                            cluster: service_juice_shop
  clusters:
    - name: grpc_als_cluster
      connect_timeout: 5s
      type: STRICT_DNS
      http2_protocol_options: {}
      load_assignment:
        cluster_name: grpc_als_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: envoy-alc
                      port_value: 9090
    - name: service_juice_shop
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: service_juice_shop
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ecco
                      port_value: 8080
